name: Deploy techblogs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-techblogs
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'apps/backend/go.mod'
          cache: true

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-x86-64-linux-gnu libsqlite3-dev

      - name: Build backend (Linux amd64)
        working-directory: apps/backend
        env:
          CC: x86_64-linux-gnu-gcc
        run: |
          mkdir -p bin
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 \
            go build -ldflags="-s -w" -o bin/techblogs-api ./cmd/api
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 \
            go build -ldflags="-s -w" -o bin/techblogs-scraper ./cmd/scraper
          file bin/techblogs-api
          file bin/techblogs-scraper

      # ── Artifacts (split) ───────────────────────────────────────────────────────
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: techblogs-frontend
          path: apps/frontend          # keep folder structure, avoid globs
          retention-days: 1
          if-no-files-found: error

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: techblogs-backend
          path: apps/backend/bin/
          retention-days: 1
          if-no-files-found: error

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # What changed?
      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            infra:
              - 'infra/**'
            frontend:
              - 'apps/frontend/**'
            backend:
              - 'apps/backend/**'

      - name: Create timestamp
        id: ts
        run: echo "value=$(date -u +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pin known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # ── Download artifacts only if needed ──────────────────────────────────────
      - uses: actions/download-artifact@v4
        with:
          name: techblogs-frontend
          path: ./artifacts/frontend

      - uses: actions/download-artifact@v4
        with:
          name: techblogs-backend
          path: ./artifacts/backend

      # ── OPTIONAL: update infra only when infra/** changed ──────────────────────
      - name: Update infra on VPS (only if infra changed)
        if: steps.changes.outputs.infra == 'true'
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -euo pipefail
          rsync -avz infra/nginx.conf "$SSH_USER@$SSH_HOST:/tmp/techblogs.nginx.conf"
          rsync -avz infra/techblogs-api.service "$SSH_USER@$SSH_HOST:/tmp/techblogs-api.service"
          ssh "$SSH_USER@$SSH_HOST" '
            set -euo pipefail
            need_reload=0
            need_restart=0

            # Nginx config
            if ! cmp -s /tmp/techblogs.nginx.conf /etc/nginx/sites-available/techblo.gs; then
              sudo install -m 644 /tmp/techblogs.nginx.conf /etc/nginx/sites-available/techblo.gs
              need_reload=1
              sudo ln -sfn /etc/nginx/sites-available/techblo.gs /etc/nginx/sites-enabled/techblo.gs
            fi

            # systemd unit
            if ! cmp -s /tmp/techblogs-api.service /etc/systemd/system/techblogs-api.service; then
              sudo install -m 644 /tmp/techblogs-api.service /etc/systemd/system/techblogs-api.service
              sudo systemctl daemon-reload
              need_restart=1
            fi

            if [ "$need_reload" -eq 1 ]; then
              sudo nginx -t
              sudo systemctl reload nginx
            fi
            if [ "$need_restart" -eq 1 ]; then
              sudo systemctl enable techblogs-api
              sudo systemctl restart techblogs-api
            fi

            echo "Infra update complete (reload=$need_reload, restart=$need_restart)"
          '

      # ── Rsync release only when something to deploy ────────────────────────────
      - name: Prepare release dir
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          VPS_BASE: ${{ secrets.VPS_BASE || '/srv/techblogs' }}
          TS: ${{ steps.ts.outputs.value }}
        run: |
          set -euo pipefail
          REL="$VPS_BASE/releases/$TS"
          ssh "$SSH_USER@$SSH_HOST" "mkdir -p \"$REL/frontend\" \"$REL/backend\""

      - name: Rsync frontend + backend
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          VPS_BASE: ${{ secrets.VPS_BASE || '/srv/techblogs' }}
          TS: ${{ steps.ts.outputs.value }}
        run: |
          set -euo pipefail
          REL="$VPS_BASE/releases/$TS"
          rsync -az --delete --chmod=Du=rwx,Dgo=rx,Fu=rwX,Fgo=rX ./artifacts/frontend/ "$SSH_USER@$SSH_HOST:$REL/frontend/"
          rsync -az --chmod=Fu=rwx,Fgo=rx ./artifacts/backend/ "$SSH_USER@$SSH_HOST:$REL/backend/"

      # ── Ownership & perms (only if we shipped anything) ───────────────────────
      - name: Fix ownership & perms
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          VPS_BASE: ${{ secrets.VPS_BASE || '/srv/techblogs' }}
          TS: ${{ steps.ts.outputs.value }}
        run: |
          set -euo pipefail
          REL="$VPS_BASE/releases/$TS"
          ssh "$SSH_USER@$SSH_HOST" "set -euo pipefail
            if [ -d \"$REL/frontend\" ]; then
              sudo chown -R root:www-data \"$REL/frontend\"
              sudo chmod -R a+rX        \"$REL/frontend\"
            fi
            if [ -d \"$REL/backend\" ]; then
              sudo chown -R techblogs:www-data \"$REL/backend\"
              sudo chmod -R u+rwX,g+rX         \"$REL/backend\"
            fi
          "

      # ── Activate + health checks (only if we shipped anything) ────────────────
      - name: Activate, (maybe) restart & health-check (with rollback)
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          VPS_BASE: ${{ secrets.VPS_BASE || '/srv/techblogs' }}
          TS: ${{ steps.ts.outputs.value }}
          FRONTEND_CHANGED: ${{ steps.changes.outputs.frontend }}
          BACKEND_CHANGED:  ${{ steps.changes.outputs.backend }}
        run: |
          set -euo pipefail
          REL="$VPS_BASE/releases/$TS"

          ssh "$SSH_USER@$SSH_HOST" bash -euxo pipefail -c "
            # Activate new release
            ln -sfn '$REL' '$VPS_BASE/current'

            if [ '$BACKEND_CHANGED' = 'true' ]; then
              systemctl restart techblogs-api
            fi

            if [ '$FRONTEND_CHANGED' = 'true' ] || [ '$BACKEND_CHANGED' = 'true' ]; then
              nginx -t && systemctl reload nginx || true
            fi

            if [ '$BACKEND_CHANGED' = 'true' ]; then
              # Socket-level health check of backend
              for i in {1..30}; do
                if curl --fail --unix-socket /run/techblogs-api/techblogs-api.sock http://localhost/health >/dev/null 2>&1; then
                  echo 'Health check PASSED'
                  exit 0
                fi
                sleep 1
              done

              echo 'Health check FAILED — rolling back to previous release' >&2
              PREV=\$(ls -1dt $VPS_BASE/releases/* | sed -n '2p' || true)
              if [ -n \"\$PREV\" ]; then
                ln -sfn \"\$PREV\" \"$VPS_BASE/current\"
                systemctl restart techblogs-api || true
                systemctl reload nginx || true
              fi
              exit 1
            fi
          "

      # ── Prune even if nothing changed is fine ─────────────────────────────────
      - name: Prune old releases (keep last 10)
        if: ${{ always() }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          VPS_BASE: ${{ secrets.VPS_BASE || '/srv/techblogs' }}
        run: |
          ssh "$SSH_USER@$SSH_HOST" "cd '$VPS_BASE/releases' && ls -1dt * 2>/dev/null | tail -n +11 | xargs -r rm -rf"

      - name: Gather logs on failure
        if: ${{ failure() }}
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          set -euo pipefail
          ssh "$SSH_USER@$SSH_HOST" '
            echo "=== systemd status techblogs-api ==="
            sudo systemctl status --no-pager techblogs-api || true
            echo "=== last 200 journal lines ==="
            sudo journalctl -u techblogs-api -n 200 --no-pager || true
            echo "=== nginx config test ==="
            sudo nginx -t || true
          ' | sed -e "s/\x1b\[[0-9;]*m//g"

      - name: Summary
        if: ${{ success() }}
        run: |
          echo "✅ Deploy complete. Frontend changed: ${{ steps.changes.outputs.frontend }}, Backend changed: ${{ steps.changes.outputs.backend }}, Infra changed: ${{ steps.changes.outputs.infra }}" >> "$GITHUB_STEP_SUMMARY"
